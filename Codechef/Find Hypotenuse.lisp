(defvar mod4Primes '(5 13 17 29 37 41 53 61))

(defun list-reverse (sequence)
	(if (null sequence) '()
	(append (list-reverse (cdr sequence)) (list (car sequence)))))

(defun primeFactors(n)
    (setq primes '())
    (setq i 3)
    (setq max 0)
    (loop while (= (mod n 2) 0)
          do (push 2 primes)
          (setq n (/ n 2)))
    (setq max (sqrt n))
    (loop while (<= i max)
          do (loop while (= (mod n i) 0)
                 do (push i primes)
                 (setq n (/ n i)))
          (setq i (+ i 1)))
    (if (> n 2) (push n primes))      
    primes)

(defun getMinHyp(n)
    (setq answer 1)
    (setq powers '())
    (setq factors (primeFactors (+ (* 2 n) 1)))
    (loop for x in factors
          do (push (/ (- x 1) 2) powers))
    (setq powers (list-reverse powers))
    (setq i 0)
    (loop for x in powers
          do (setq answer (* answer (expt (nth i mod4Primes) x)))
          (setq i (+ i 1))) answer)

(defun main()
    (setq testCases (read))
    (dotimes (i testCases)
        (setf num (read))
        (format t "~a~%" (getMinHyp num)))
    (return-from main 0))
(main)